[gd_scene load_steps=26 format=2]

[ext_resource path="res://assets/textures/background/Background_0.png" type="Texture" id=1]
[ext_resource path="res://assets/textures/background/layers/Layer_0005_5.png" type="Texture" id=2]
[ext_resource path="res://assets/textures/background/layers/Layer_0002_7.png" type="Texture" id=3]
[ext_resource path="res://assets/textures/background/layers/Layer_0009_2.png" type="Texture" id=4]
[ext_resource path="res://assets/textures/background/layers/Layer_0007_Lights.png" type="Texture" id=5]
[ext_resource path="res://assets/textures/background/layers/Layer_0008_3.png" type="Texture" id=6]
[ext_resource path="res://assets/textures/background/layers/Layer_0003_6.png" type="Texture" id=7]
[ext_resource path="res://assets/textures/background/layers/Layer_0001_8.png" type="Texture" id=8]
[ext_resource path="res://assets/textures/background/layers/Layer_0004_Lights.png" type="Texture" id=9]
[ext_resource path="res://assets/textures/background/layers/Layer_0000_9.png" type="Texture" id=10]
[ext_resource path="res://assets/textures/background/layers/Layer_0006_4.png" type="Texture" id=11]

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;

/*
Made with a whole lot of nightmare fuel.
Logic's Under Pressure and Bobby Tarantino II Albums was in rotation during
the making process.
Hope you enjoy!

You're auto-friended to me if you're a Logic fan
RattPack all day!
*/

//upscaling multiplier amount
const float SCALE = 10.0;

//image mipmap level, for base upscaling
const int ML = 0;

//equality threshold of 2 colors before forming lines
uniform float THRESHOLD = 0.1;

//anti aliasing scaling, smaller value make lines more blurry
uniform float AA_SCALE = 2.0;


//draw diagonal line connecting 2 pixels if within threshold
vec4 diag(vec4 sum, vec2 uv, vec2 p1, vec2 p2, sampler2D iChannel0, float LINE_THICKNESS) {
    vec4 v1 = texelFetch(iChannel0,ivec2(uv+vec2(p1.x,p1.y)),ML),
        v2 = texelFetch(iChannel0,ivec2(uv+vec2(p2.x,p2.y)),ML);
    if (length(v1-v2) < THRESHOLD) {
    	vec2 dir = p2-p1,
            lp = uv-(floor(uv+p1)+.5);
    	dir = normalize(vec2(dir.y,-dir.x));
        float l = clamp((LINE_THICKNESS-dot(lp,dir))*AA_SCALE,0.,1.);
        sum = mix(sum,v1,l);
    }
    return sum;
}

void fragment()
{
	float LINE_THICKNESS = 0.4;
	vec2 ip = UV;
	ip = UV * (1.0 / TEXTURE_PIXEL_SIZE);
	
		//start with nearest pixel as 'background'
		vec4 s = texelFetch(TEXTURE,ivec2(ip),ML);
		
		//draw anti aliased diagonal lines of surrounding pixels as 'foreground'
		s = diag(s,ip,vec2(-1,0),vec2(0,1), TEXTURE, LINE_THICKNESS);
		s = diag(s,ip,vec2(0,1),vec2(1,0), TEXTURE, LINE_THICKNESS);
		s = diag(s,ip,vec2(1,0),vec2(0,-1), TEXTURE, LINE_THICKNESS);
		s = diag(s,ip,vec2(0,-2),vec2(-1,0), TEXTURE, LINE_THICKNESS);
		
		COLOR = s;
}"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )
shader_param/THRESHOLD = 0.1
shader_param/AA_SCALE = 2.0

[sub_resource type="Shader" id=5]

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[sub_resource type="Shader" id=7]

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;

uniform float x_intensity = 3.0;
uniform float y_intensity = 0.5;
uniform float offset = 0.0;
uniform float speed : hint_range(0, 20) = 2.0;
uniform float wave_frequency : hint_range(0, 100) = 20;
uniform float wave_length : hint_range(50, 800) = 200.0;

void fragment() {
	vec2 real_uv = vec2(UV.x, UV.y);
	
	vec2 vecToBottom = vec2(1, 1) - UV.y; 
	float distToBottom = length(vecToBottom);
	
	float final_speed = TIME * (speed / 4.0) + offset;
	
	float time_var = (cos(final_speed) * cos(final_speed * 4.0) * cos(final_speed * 2.0))/(200.0);
	float time_var2 = (cos(final_speed) * cos(final_speed * 6.0) * cos(final_speed * 2.0))/(200.0);
	
	float wave_from_x = (cos(real_uv.x * 100.0)/1000.0);
	float wave_large_from_x = cos(TIME + (real_uv.x * wave_frequency))/wave_length;
	
	float wave_from_y = (cos(real_uv.y * 99000.0)/90000.0);
	
	float new_x = real_uv.x + time_var * (distToBottom * x_intensity) + wave_from_x + (wave_large_from_x);
	float new_y = real_uv.y + time_var2 * (distToBottom * y_intensity);
	
	vec2 new_uv1 = vec2(new_x, new_y);
	vec4 new_texture = texture(TEXTURE, new_uv1);
	
	if(new_texture.rgb != vec3(1,1,0)){
		COLOR.rgba = new_texture.rgba;
	}
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/x_intensity = 3.0
shader_param/y_intensity = 0.5
shader_param/offset = 0.0
shader_param/speed = 2.0
shader_param/wave_frequency = 20.0
shader_param/wave_length = 200.0

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float x_intensity = 3.0;
uniform float y_intensity = 0.5;
uniform float offset = 0.0;
uniform float speed : hint_range(0, 20) = 2.0;
uniform float wave_frequency : hint_range(0, 100) = 20;
uniform float wave_length : hint_range(50, 800) = 200.0;

void fragment() {
	vec2 real_uv = vec2(UV.x, UV.y);
	
	vec2 vecToBottom = vec2(1, 1) - UV.y; 
	float distToBottom = length(vecToBottom);
	
	float final_speed = TIME * (speed / 4.0) + offset;
	
	float time_var = (cos(final_speed) * cos(final_speed * 4.0) * cos(final_speed * 2.0))/(200.0);
	float time_var2 = (cos(final_speed) * cos(final_speed * 6.0) * cos(final_speed * 2.0))/(200.0);
	
	float wave_from_x = (cos(real_uv.x * 100.0)/1000.0);
	float wave_large_from_x = cos(TIME + (real_uv.x * wave_frequency))/wave_length;
	
	float wave_from_y = (cos(real_uv.y * 99000.0)/90000.0);
	
	float new_x = real_uv.x + time_var * (distToBottom * x_intensity) + wave_from_x + (wave_large_from_x);
	float new_y = real_uv.y + time_var2 * (distToBottom * y_intensity);
	
	vec2 new_uv1 = vec2(new_x, new_y);
	vec4 new_texture = texture(TEXTURE, new_uv1);
	
	if(new_texture.rgb != vec3(1,1,0)){
		COLOR.rgba = new_texture.rgba;
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/x_intensity = 3.0
shader_param/y_intensity = 0.5
shader_param/offset = 0.0
shader_param/speed = 2.0
shader_param/wave_frequency = 20.0
shader_param/wave_length = 200.0

[sub_resource type="Shader" id=9]

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;

uniform float x_intensity = 3.0;
uniform float y_intensity = 0.5;
uniform float offset = 0.0;
uniform float speed : hint_range(0, 20) = 2.0;
uniform float wave_frequency : hint_range(0, 100) = 20;
uniform float wave_length : hint_range(50, 800) = 200.0;

void fragment() {
	vec2 real_uv = vec2(UV.x, UV.y);
	
	vec2 vecToBottom = vec2(1, 1) - UV.y; 
	float distToBottom = length(vecToBottom);
	
	float final_speed = TIME * (speed / 4.0) + offset;
	
	float time_var = (cos(final_speed) * cos(final_speed * 4.0) * cos(final_speed * 2.0))/(200.0);
	float time_var2 = (cos(final_speed) * cos(final_speed * 6.0) * cos(final_speed * 2.0))/(200.0);
	
	float wave_from_x = (cos(real_uv.x * 100.0)/1000.0);
	float wave_large_from_x = cos(TIME + (real_uv.x * wave_frequency))/wave_length;
	
	float wave_from_y = (cos(real_uv.y * 99000.0)/90000.0);
	
	float new_x = real_uv.x + time_var * (distToBottom * x_intensity) + wave_from_x + (wave_large_from_x);
	float new_y = real_uv.y + time_var2 * (distToBottom * y_intensity);
	
	vec2 new_uv1 = vec2(new_x, new_y);
	vec4 new_texture = texture(TEXTURE, new_uv1);
	
	if(new_texture.rgb != vec3(1,1,0)){
		COLOR.rgba = new_texture.rgba;
	}
}"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/x_intensity = 3.0
shader_param/y_intensity = 0.5
shader_param/offset = 0.0
shader_param/speed = 2.0
shader_param/wave_frequency = 20.0
shader_param/wave_length = 200.0

[node name="DefaultBackground" type="ParallaxBackground"]
scroll_ignore_camera_zoom = true

[node name="Layer" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.005, 0 )
motion_mirroring = Vector2( 250, 0 )

[node name="Sprite" type="Sprite" parent="Layer"]
material = SubResource( 16 )
position = Vector2( 110, -6 )
scale = Vector2( 0.325521, 0.435997 )
texture = ExtResource( 1 )

[node name="CloudsLayer1" type="ParallaxLayer" parent="."]
visible = false
motion_scale = Vector2( 0.01, 0 )
motion_mirroring = Vector2( 180, 0 )

[node name="Sprite" type="Sprite" parent="CloudsLayer1"]
modulate = Color( 0.223529, 0.0431373, 0.392157, 1 )
position = Vector2( 194.5, -77 )
scale = Vector2( 0.2, 0.301 )
texture = ExtResource( 4 )

[node name="MountainsLayer" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.05, 0 )
motion_mirroring = Vector2( 235, 0 )

[node name="Sprite" type="Sprite" parent="MountainsLayer"]
modulate = Color( 0.168627, 0.941176, 0.741176, 1 )
material = SubResource( 6 )
position = Vector2( 102.5, -116.231 )
scale = Vector2( 0.332974, 0.424827 )
texture = ExtResource( 5 )

[node name="MountainsLayer2" type="ParallaxLayer" parent="."]
visible = false
motion_scale = Vector2( 0.05, 0 )
motion_mirroring = Vector2( 220, 0 )

[node name="Sprite" type="Sprite" parent="MountainsLayer2"]
modulate = Color( 0.027451, 0.360784, 0.0627451, 1 )
position = Vector2( -567, -139 )
scale = Vector2( 0.393807, 0.249648 )
texture = ExtResource( 6 )

[node name="MountainsLayer3" type="ParallaxLayer" parent="."]
visible = false
motion_scale = Vector2( 0.05, 0 )
motion_mirroring = Vector2( 240, 0 )

[node name="Sprite" type="Sprite" parent="MountainsLayer3"]
modulate = Color( 0.027451, 0.309804, 0.00392157, 1 )
position = Vector2( -504, -281 )
scale = Vector2( 0.38325, 0.485334 )
texture = ExtResource( 11 )

[node name="MountainsLayer4" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.05, 0 )
motion_mirroring = Vector2( 288, 0 )

[node name="Sprite" type="Sprite" parent="MountainsLayer4"]
modulate = Color( 0.101961, 0.54902, 0.498039, 1 )
material = SubResource( 8 )
position = Vector2( 164, 19 )
scale = Vector2( 0.23433, 0.24201 )
z_index = 15
texture = ExtResource( 9 )

[node name="MountainsLayer5" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.05, 0 )
motion_mirroring = Vector2( 288, 0 )

[node name="Sprite" type="Sprite" parent="MountainsLayer5"]
modulate = Color( 0.65098, 0.180392, 0.764706, 1 )
position = Vector2( 132, -121.757 )
scale = Vector2( 0.314716, 0.456456 )
texture = ExtResource( 2 )

[node name="MountainsLayer6" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.05, 0 )
motion_mirroring = Vector2( 225, 0 )

[node name="Sprite" type="Sprite" parent="MountainsLayer6"]
modulate = Color( 0.137255, 0.886275, 0.745098, 1 )
material = SubResource( 12 )
position = Vector2( 110.836, -118.787 )
scale = Vector2( 0.213716, 0.426229 )
texture = ExtResource( 7 )

[node name="MountainsLayer7" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.05, 0 )
motion_mirroring = Vector2( 288, 0 )

[node name="Sprite" type="Sprite" parent="MountainsLayer7"]
modulate = Color( 0.258824, 0.545098, 0.478431, 1 )
position = Vector2( 138, -114 )
scale = Vector2( 0.336544, 0.331909 )
texture = ExtResource( 3 )

[node name="MountainsLayer9" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.05, 0 )
motion_mirroring = Vector2( 288, 0 )

[node name="Sprite" type="Sprite" parent="MountainsLayer9"]
modulate = Color( 0.0730591, 0.519531, 0.300507, 1 )
material = SubResource( 2 )
position = Vector2( 153, -127 )
scale = Vector2( 0.336544, 0.434858 )
texture = ExtResource( 10 )

[node name="ColorRect" type="ColorRect" parent="MountainsLayer9"]
material = SubResource( 10 )
margin_left = -15.0
margin_top = 64.0
margin_right = 297.0
margin_bottom = 198.0
color = Color( 0.00392157, 0.0941176, 0.0117647, 1 )

[node name="MountainsLayer8" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.05, 0 )
motion_mirroring = Vector2( 288, 0 )

[node name="Sprite" type="Sprite" parent="MountainsLayer8"]
modulate = Color( 0.054902, 0.372549, 0.0823529, 1 )
material = SubResource( 14 )
position = Vector2( 138, -97 )
scale = Vector2( 0.329001, 0.40938 )
texture = ExtResource( 8 )
