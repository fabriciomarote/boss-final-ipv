[gd_scene load_steps=59 format=2]

[ext_resource path="res://assets/sounds/enemies/attack-smoke.mp3" type="AudioStream" id=1]
[ext_resource path="res://src/game/entities/enemies/mushroom/states/DieState.gd" type="Script" id=2]
[ext_resource path="res://src/game/entities/enemies/mushroom/states/WalkState.gd" type="Script" id=3]
[ext_resource path="res://src/game/entities/enemies/mushroom/states/IdleState.gd" type="Script" id=4]
[ext_resource path="res://src/game/entities/enemies/mushroom/states/AlertState.gd" type="Script" id=5]
[ext_resource path="res://src/game/entities/enemies/mushroom/Mushroom.gd" type="Script" id=6]
[ext_resource path="res://src/game/entities/enemies/mushroom/MushroomStateMachine.gd" type="Script" id=7]
[ext_resource path="res://assets/textures/enemies/mushroom/Run.png" type="Texture" id=8]
[ext_resource path="res://assets/textures/enemies/mushroom/Idle.png" type="Texture" id=9]
[ext_resource path="res://assets/textures/enemies/mushroom/Death.png" type="Texture" id=10]
[ext_resource path="res://assets/textures/enemies/mushroom/Take Hit.png" type="Texture" id=11]
[ext_resource path="res://assets/textures/enemies/mushroom/Attack3.png" type="Texture" id=12]
[ext_resource path="res://src/game/entities/enemies/mushroom/states/DamageState.gd" type="Script" id=13]
[ext_resource path="res://src/game/entities/enemies/mushroom/states/AttackState.gd" type="Script" id=14]
[ext_resource path="res://assets/sounds/enemies/Mushroom_die.wav" type="AudioStream" id=15]
[ext_resource path="res://assets/textures/enemies/mushroom/smoke5.png" type="Texture" id=16]
[ext_resource path="res://assets/sounds/enemies/Pain_4.wav" type="AudioStream" id=17]

[sub_resource type="RectangleShape2D" id=81]
extents = Vector2( 23, 54 )

[sub_resource type="Shader" id=137]
code = "shader_type canvas_item;

/*
Made with a whole lot of nightmare fuel.
Logic's Under Pressure and Bobby Tarantino II Albums was in rotation during
the making process.
Hope you enjoy!

You're auto-friended to me if you're a Logic fan
RattPack all day!
*/

//image mipmap level, for base upscaling
const int ML = 0;

//equality threshold of 2 colors before forming lines
uniform float THRESHOLD = 0.1;

//anti aliasing scaling, smaller value make lines more blurry
uniform float AA_SCALE = 10.0;

//draw diagonal line connecting 2 pixels if within threshold
bool diag(inout vec4 sum, vec2 uv, vec2 p1, vec2 p2, sampler2D iChannel0, float LINE_THICKNESS) {
    vec4 v1 = texelFetch(iChannel0,ivec2(uv+vec2(p1.x,p1.y)),ML),
        v2 = texelFetch(iChannel0,ivec2(uv+vec2(p2.x,p2.y)),ML);
    if (length(v1-v2) < THRESHOLD) {
    	vec2 dir = p2-p1,
            lp = uv-(floor(uv+p1)+.5);
    	dir = normalize(vec2(dir.y,-dir.x));
        float l = clamp((LINE_THICKNESS-dot(lp,dir))*AA_SCALE,0.,1.);
        sum = mix(sum,v1,l);
    	return true;
    }
    return false;
}

void fragment(){
	//line thickness
	float LINE_THICKNESS;
	vec2 ip = UV * (1.0 / TEXTURE_PIXEL_SIZE);
	
	
		//start with nearest pixel as 'background'
		vec4 s = texelFetch(TEXTURE,ivec2(int(ip.x),int(ip.y)),ML);
		
		//draw anti aliased diagonal lines of surrounding pixels as 'foreground'
		LINE_THICKNESS = 0.4;
		if (diag(s,ip,vec2(-1,0),vec2(0,1), TEXTURE, LINE_THICKNESS)) {
			LINE_THICKNESS = 0.3;
			diag(s,ip,vec2(-1,0),vec2(1,1), TEXTURE, LINE_THICKNESS);
			diag(s,ip,vec2(-1,-1),vec2(0,1), TEXTURE, LINE_THICKNESS);
		}
		LINE_THICKNESS = 0.4;
		if (diag(s,ip,vec2(0,1),vec2(1,0), TEXTURE, LINE_THICKNESS)) {
			LINE_THICKNESS = 0.3;
			diag(s,ip,vec2(0,1),vec2(1,-1), TEXTURE, LINE_THICKNESS);
			diag(s,ip,vec2(-1,1),vec2(1,0), TEXTURE, LINE_THICKNESS);
		}
		LINE_THICKNESS = 0.4;
		if (diag(s,ip,vec2(1,0),vec2(0,-1), TEXTURE, LINE_THICKNESS)) {
			LINE_THICKNESS = 0.3;
			diag(s,ip,vec2(1,0),vec2(-1,-1), TEXTURE, LINE_THICKNESS);
			diag(s,ip,vec2(1,1),vec2(0,-1), TEXTURE, LINE_THICKNESS);
		}
		LINE_THICKNESS = 0.4;
		if (diag(s,ip,vec2(0,-1),vec2(-1,0), TEXTURE, LINE_THICKNESS)) {
			LINE_THICKNESS = 0.3;
			diag(s,ip,vec2(0,-1),vec2(-1,1), TEXTURE, LINE_THICKNESS);
			diag(s,ip,vec2(1,-1),vec2(-1,0), TEXTURE, LINE_THICKNESS);
		}
		
		COLOR = s;
}"

[sub_resource type="ShaderMaterial" id=138]
shader = SubResource( 137 )
shader_param/THRESHOLD = 0.1
shader_param/AA_SCALE = 10.0

[sub_resource type="AtlasTexture" id=105]
atlas = ExtResource( 9 )
region = Rect2( 0, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=106]
atlas = ExtResource( 9 )
region = Rect2( 150, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=107]
atlas = ExtResource( 12 )
region = Rect2( 0, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=108]
atlas = ExtResource( 12 )
region = Rect2( 150, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=109]
atlas = ExtResource( 12 )
region = Rect2( 300, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=110]
atlas = ExtResource( 12 )
region = Rect2( 450, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=111]
atlas = ExtResource( 12 )
region = Rect2( 600, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=112]
atlas = ExtResource( 12 )
region = Rect2( 750, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=113]
atlas = ExtResource( 12 )
region = Rect2( 900, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=114]
atlas = ExtResource( 12 )
region = Rect2( 1050, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=115]
atlas = ExtResource( 12 )
region = Rect2( 1200, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=116]
atlas = ExtResource( 12 )
region = Rect2( 1350, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=117]
atlas = ExtResource( 12 )
region = Rect2( 1500, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=118]
atlas = ExtResource( 11 )
region = Rect2( 0, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=119]
atlas = ExtResource( 11 )
region = Rect2( 150, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=120]
atlas = ExtResource( 10 )
region = Rect2( 0, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=121]
atlas = ExtResource( 10 )
region = Rect2( 150, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=122]
atlas = ExtResource( 10 )
region = Rect2( 300, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=123]
atlas = ExtResource( 10 )
region = Rect2( 450, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=124]
atlas = ExtResource( 9 )
region = Rect2( 0, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=125]
atlas = ExtResource( 9 )
region = Rect2( 150, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=126]
atlas = ExtResource( 9 )
region = Rect2( 300, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=127]
atlas = ExtResource( 9 )
region = Rect2( 450, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=128]
atlas = ExtResource( 8 )
region = Rect2( 0, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=129]
atlas = ExtResource( 8 )
region = Rect2( 150, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=130]
atlas = ExtResource( 8 )
region = Rect2( 300, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=131]
atlas = ExtResource( 8 )
region = Rect2( 450, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=132]
atlas = ExtResource( 8 )
region = Rect2( 600, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=133]
atlas = ExtResource( 8 )
region = Rect2( 750, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=134]
atlas = ExtResource( 8 )
region = Rect2( 900, 0, 150, 150 )

[sub_resource type="AtlasTexture" id=135]
atlas = ExtResource( 8 )
region = Rect2( 1050, 0, 150, 150 )

[sub_resource type="SpriteFrames" id=80]
animations = [ {
"frames": [ SubResource( 105 ), SubResource( 106 ) ],
"loop": false,
"name": "alert",
"speed": 10.0
}, {
"frames": [ SubResource( 107 ), SubResource( 108 ), SubResource( 109 ), SubResource( 110 ), SubResource( 111 ), SubResource( 112 ), SubResource( 113 ), SubResource( 114 ), SubResource( 115 ), SubResource( 116 ), SubResource( 117 ) ],
"loop": false,
"name": "attack",
"speed": 10.0
}, {
"frames": [ SubResource( 118 ), SubResource( 119 ) ],
"loop": true,
"name": "damage",
"speed": 5.0
}, {
"frames": [ SubResource( 120 ), SubResource( 121 ), SubResource( 122 ), SubResource( 123 ) ],
"loop": false,
"name": "die",
"speed": 5.0
}, {
"frames": [ SubResource( 124 ), SubResource( 125 ), SubResource( 126 ), SubResource( 127 ) ],
"loop": true,
"name": "idle",
"speed": 5.0
}, {
"frames": [ SubResource( 128 ), SubResource( 129 ), SubResource( 130 ), SubResource( 131 ), SubResource( 132 ), SubResource( 133 ), SubResource( 134 ), SubResource( 135 ) ],
"loop": true,
"name": "walk",
"speed": 10.0
} ]

[sub_resource type="StyleBoxFlat" id=104]
bg_color = Color( 1, 0.00784314, 0.027451, 1 )

[sub_resource type="StyleBoxFlat" id=103]
bg_color = Color( 0, 0, 0, 1 )
border_color = Color( 0, 0, 0, 1 )
corner_radius_top_left = 1
corner_radius_top_right = 1
corner_radius_bottom_right = 1
corner_radius_bottom_left = 1

[sub_resource type="CapsuleShape2D" id=142]
radius = 85.9997
height = 224.001

[sub_resource type="Shader" id=140]
code = "shader_type canvas_item;

/*
Made with a whole lot of nightmare fuel.
Logic's Under Pressure and Bobby Tarantino II Albums was in rotation during
the making process.
Hope you enjoy!

You're auto-friended to me if you're a Logic fan
RattPack all day!
*/

//image mipmap level, for base upscaling
const int ML = 0;

//equality threshold of 2 colors before forming lines
uniform float THRESHOLD = 0.1;

//anti aliasing scaling, smaller value make lines more blurry
uniform float AA_SCALE = 10.0;

//draw diagonal line connecting 2 pixels if within threshold
bool diag(inout vec4 sum, vec2 uv, vec2 p1, vec2 p2, sampler2D iChannel0, float LINE_THICKNESS) {
    vec4 v1 = texelFetch(iChannel0,ivec2(uv+vec2(p1.x,p1.y)),ML),
        v2 = texelFetch(iChannel0,ivec2(uv+vec2(p2.x,p2.y)),ML);
    if (length(v1-v2) < THRESHOLD) {
    	vec2 dir = p2-p1,
            lp = uv-(floor(uv+p1)+.5);
    	dir = normalize(vec2(dir.y,-dir.x));
        float l = clamp((LINE_THICKNESS-dot(lp,dir))*AA_SCALE,0.,1.);
        sum = mix(sum,v1,l);
    	return true;
    }
    return false;
}

void fragment(){
	//line thickness
	float LINE_THICKNESS;
	vec2 ip = UV * (1.0 / TEXTURE_PIXEL_SIZE);
	
	
		//start with nearest pixel as 'background'
		vec4 s = texelFetch(TEXTURE,ivec2(int(ip.x),int(ip.y)),ML);
		
		//draw anti aliased diagonal lines of surrounding pixels as 'foreground'
		LINE_THICKNESS = 0.4;
		if (diag(s,ip,vec2(-1,0),vec2(0,1), TEXTURE, LINE_THICKNESS)) {
			LINE_THICKNESS = 0.3;
			diag(s,ip,vec2(-1,0),vec2(1,1), TEXTURE, LINE_THICKNESS);
			diag(s,ip,vec2(-1,-1),vec2(0,1), TEXTURE, LINE_THICKNESS);
		}
		LINE_THICKNESS = 0.4;
		if (diag(s,ip,vec2(0,1),vec2(1,0), TEXTURE, LINE_THICKNESS)) {
			LINE_THICKNESS = 0.3;
			diag(s,ip,vec2(0,1),vec2(1,-1), TEXTURE, LINE_THICKNESS);
			diag(s,ip,vec2(-1,1),vec2(1,0), TEXTURE, LINE_THICKNESS);
		}
		LINE_THICKNESS = 0.4;
		if (diag(s,ip,vec2(1,0),vec2(0,-1), TEXTURE, LINE_THICKNESS)) {
			LINE_THICKNESS = 0.3;
			diag(s,ip,vec2(1,0),vec2(-1,-1), TEXTURE, LINE_THICKNESS);
			diag(s,ip,vec2(1,1),vec2(0,-1), TEXTURE, LINE_THICKNESS);
		}
		LINE_THICKNESS = 0.4;
		if (diag(s,ip,vec2(0,-1),vec2(-1,0), TEXTURE, LINE_THICKNESS)) {
			LINE_THICKNESS = 0.3;
			diag(s,ip,vec2(0,-1),vec2(-1,1), TEXTURE, LINE_THICKNESS);
			diag(s,ip,vec2(1,-1),vec2(-1,0), TEXTURE, LINE_THICKNESS);
		}
		
		COLOR = s;
}"

[sub_resource type="ShaderMaterial" id=141]
shader = SubResource( 140 )
shader_param/THRESHOLD = 0.1
shader_param/AA_SCALE = 10.0

[sub_resource type="RectangleShape2D" id=136]
extents = Vector2( 351, 89 )

[node name="Mushroom" type="KinematicBody2D"]
scale = Vector2( 0.5, 0.5 )
collision_layer = 4
collision_mask = 17
script = ExtResource( 6 )
audio_attack_sfx = ExtResource( 1 )
damage_sfx = ExtResource( 17 )

[node name="StateMachine" type="Node" parent="."]
script = ExtResource( 7 )
character_path = NodePath("..")
START_STATE = NodePath("Walk")
STATES_LIST = [ NodePath("Idle"), NodePath("Die"), NodePath("Walk"), NodePath("Alert"), NodePath("Damage"), NodePath("Attack") ]

[node name="Idle" type="Node" parent="StateMachine"]
script = ExtResource( 4 )
state_id = "idle"

[node name="Die" type="Node" parent="StateMachine"]
script = ExtResource( 2 )
state_id = "die"

[node name="Walk" type="Node" parent="StateMachine"]
script = ExtResource( 3 )
state_id = "walk"

[node name="Alert" type="Node" parent="StateMachine"]
script = ExtResource( 5 )
state_id = "alert"

[node name="Timer" type="Timer" parent="StateMachine/Alert"]
wait_time = 0.7
one_shot = true

[node name="Damage" type="Node" parent="StateMachine"]
script = ExtResource( 13 )
state_id = "damage"

[node name="Attack" type="Node" parent="StateMachine"]
script = ExtResource( 14 )
state_id = "attack"

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( -3, -16 )
shape = SubResource( 81 )

[node name="Pivot" type="Node2D" parent="."]
position = Vector2( 0, -1 )

[node name="Body" type="AnimatedSprite" parent="Pivot"]
material = SubResource( 138 )
position = Vector2( 7.62939e-06, -39 )
scale = Vector2( 3.69083, 3.27417 )
frames = SubResource( 80 )
animation = "walk"
playing = true
flip_h = true

[node name="HUD" type="Node2D" parent="Pivot"]
position = Vector2( 0, -5.36442e-07 )

[node name="Control" type="Control" parent="Pivot/HUD"]
margin_left = -16.0
margin_top = -40.0
margin_right = 16.0
margin_bottom = -35.0

[node name="LifeProgressBar" type="ProgressBar" parent="Pivot/HUD/Control"]
margin_left = -24.0
margin_top = -55.0
margin_right = 50.0
margin_bottom = -49.0
custom_styles/fg = SubResource( 104 )
custom_styles/bg = SubResource( 103 )
max_value = 10.0
step = 1.0
value = 5.0
rounded = true
percent_visible = false

[node name="FirePosition" type="Position2D" parent="Pivot"]
position = Vector2( -30, -45 )

[node name="RayCast2D" type="RayCast2D" parent="Pivot"]
position = Vector2( 0, 1 )
cast_to = Vector2( -120, 0 )
collision_mask = 3

[node name="AreaAttack" type="Area2D" parent="Pivot"]
collision_mask = 3

[node name="CollisionShape2D" type="CollisionShape2D" parent="Pivot/AreaAttack"]
position = Vector2( -18, -19 )
rotation = 1.5708
shape = SubResource( 142 )
disabled = true

[node name="Smoke" type="Sprite" parent="Pivot/AreaAttack"]
visible = false
modulate = Color( 0.490196, 0, 0, 0.498039 )
material = SubResource( 141 )
position = Vector2( -2, -25 )
scale = Vector2( 0.526125, 0.422991 )
texture = ExtResource( 16 )

[node name="Timer_activate" type="Timer" parent="Pivot/AreaAttack"]
wait_time = 0.5
one_shot = true

[node name="Timer_disable" type="Timer" parent="Pivot/AreaAttack"]
wait_time = 0.3

[node name="DetectionArea" type="Area2D" parent="Pivot"]
collision_layer = 0
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="Pivot/DetectionArea"]
position = Vector2( 1, -43 )
shape = SubResource( 136 )

[node name="MushroomSFX" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 15 )
bus = "SFX"

[node name="SFX" type="AudioStreamPlayer2D" parent="."]
bus = "SFX"

[connection signal="hit" from="." to="StateMachine" method="notify_hit"]
[connection signal="hp_changed" from="." to="StateMachine" method="_on_Mushroom_hp_changed"]
[connection signal="animation_finished" from="Pivot/Body" to="StateMachine" method="_on_Body_animation_finished"]
[connection signal="body_entered" from="Pivot/AreaAttack" to="." method="_on_AreaAttack_body_entered"]
[connection signal="timeout" from="Pivot/AreaAttack/Timer_activate" to="." method="_on_Timer_activate_timeout"]
[connection signal="timeout" from="Pivot/AreaAttack/Timer_disable" to="." method="_on_Timer_disable_timeout"]
[connection signal="body_entered" from="Pivot/DetectionArea" to="StateMachine" method="_on_DetectionArea_body_entered"]
[connection signal="body_exited" from="Pivot/DetectionArea" to="StateMachine" method="_on_DetectionArea_body_exited"]
